pipeline {
    agent any
    environment{
        JDK_PATH = tool name: 'openjdk-11'
        JAVA_HOME = "${JDK_PATH}"
        MAVEN_IMAGE = 'maven:3.8.4-jdk-11'
        SCANNER_HOME = tool name: 'SonarScanner 4.5'
    }

    stages {
        stage('Build') {
            agent {
                docker {
                    image "${MAVEN_IMAGE}"
                    args "-v ${JDK_PATH}:${JDK_PATH}"
                    reuseNode true
                }
            }
            steps {
                echo 'Since we are running a develop build, we use the byggReleaseConfig for Maven'
                configFileProvider([configFile(fileId: "byggReleaseConfig", variable: 'MAVEN_SETTINGS')]) {
                    sh 'pwd'
                    echo 'Compiling, testing and building...'
                    sh 'mvn --global-settings ${MAVEN_SETTINGS} -P test-coverage,leak clean install'
                    script {
                        pomVersion = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
                    }
                }
            }
        }
        stage('SonarScanner'){
            when {
                branch 'develop'
            }
            steps {
                withSonarQubeEnv(credentialsId: "${params.SONAR_TOKENID}", installationName: "${params.SONAR_ENV}") {
                    sh """${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${params.SONAR_PROJECTKEY} \
                            -Dsonar.projectVersion=${pomVersion} \
                            -Dsonar.java.binaries=${params.SONAR_JAVA_BINARIES} \
                            -Dsonar.coverage.jacoco.xmlReportPaths=${params.SONAR_JACOCO_REPORTS} \
                            -Dsonar.test.inclusions=${params.SONAR_TEST_INCLUSIONS} \
                            -Dsonar.sourceEncoding=UTF-8
                        """
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Starting results handling...'
                junit '**/target/surefire-reports/TEST-*.xml'
                jacoco()
                archiveArtifacts '**/target/*.war'
                echo "Branch: ${BRANCH_NAME}. Only handle Sonar results on the develop branch."
                if ("${BRANCH_NAME}" == 'develop') {
                    timeout(time: 1, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        unsuccessful {
            echo 'Build unsuccessful'
            emailext attachLog: true, 
                subject: "Build failed in Jenkins: ${JOB_NAME}#${BUILD_NUMBER}", 
                body: "See ${BUILD_URL} for details.",
                to: "${params.EMAIL_RECIPIENTS}"
        }

        changed {
            script {
                if ("${currentBuild.currentResult}" == 'SUCCESS') {
                    echo "Current build successful, previous build was unsuccessful"
                    emailext attachLog: true, 
                        subject: "${JOB_NAME} back to stable", 
                        body: "See ${BUILD_URL} for details.",
                        to: "${params.EMAIL_RECIPIENTS}"        
                }
            }
        }

        cleanup {
            echo 'Cleaning workspace...'
            cleanWs()
        }
    }
}

node {
jdk = tool name: 'Java 8_152'
   env.JAVA_HOME = "${jdk}"
   def mvnHome
   catchError {
      stage('Preparation') { // for display purposes
         // Get some code from a GitHub repository
         // git 'https://github.com/skltp/vp.git'
         git branch: 'develop', url: 'https://github.com/skltp/admin-web.git'
      
         // Get the Maven tool.
         // ** NOTE: This 'M3' Maven tool must be configured
         // **       in the global configuration.           
         mvnHome = tool 'Maven 3.5.0'
      }
      stage('Build') {
        // Run the maven build
        configFileProvider([configFile(fileId: 'ae5eda6d-e166-4b43-a78c-ed67ed10cac0', variable: 'MAVEN_SETTINGS')]) {
          def maven = docker.image("maven:3.8.1-jdk-8")
          maven.pull()
          maven.inside("-v ${jdk}:${jdk} -e GRAILS_MAVEN_LOCAL=/var/lib/jenkins/workspace/SKLTP/TAK_Snapshot_Pipeline/?/.m2/repository/") {
            sh 'printenv && mvn --global-settings ${MAVEN_SETTINGS} clean install'
          }
        }
      }
   } 
   stage('Results') {
      junit '**/target/surefire-reports/TEST-*.xml'
      archiveArtifacts '**/target/*.war'
   }

   def previousResult = currentBuild.previousBuild?.result
   if(currentBuild.currentResult != 'SUCCESS') {
      //emailext attachLog: true, to: 'skltp@kentor.se', recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "Build failed in Jenkins: ${env.JOB_NAME}#${currentBuild.number}", body: "See ${env.BUILD_URL} for details."
      emailext attachLog: true, recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "Build failed in Jenkins: ${env.JOB_NAME}#${currentBuild.number}", body: "See ${env.BUILD_URL} for details."
   }
   else if (currentBuild.currentResult == 'SUCCESS' && previousResult && previousResult != currentBuild.currentResult) {
      //emailext attachLog: true, to: 'skltp@kentor.se', recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "${env.JOB_NAME} back to stable", body: "See ${env.BUILD_URL} for details."
      emailext attachLog: true, recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "${env.JOB_NAME} back to stable", body: "See ${env.BUILD_URL} for details."
   }
}